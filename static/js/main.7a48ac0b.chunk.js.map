{"version":3,"sources":["components/Titles.js","components/Weather.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","style","titleStyle","Component","color","display","margin","Weather","onSubmit","this","props","getWeather","inputStyle","type","name","placeholder","btnStyle","padding","backgroundColor","fontWeight","fontSize","borderRadius","border","Display","className","city","country","temperature","humidity","description","error","API_key","App","state","undefined","_callee","e","result","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","weather","sys","stop","components_Titles","components_Weather","components_Display","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a48ac0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Titles extends Component {\n  render() {\n    return <h1 style={titleStyle}>Weather App</h1>;\n  }\n}\nconst titleStyle = {\n  color: '#000',\n  display: 'table',\n  margin: '20px auto'\n};\n\nexport default Titles;\n","import React, { Component } from 'react';\n\nclass Weather extends Component {\n  render() {\n    return (\n      <form onSubmit={this.props.getWeather}>\n        <input\n          style={inputStyle}\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"Please enter city...\"\n        />\n        <input\n          style={inputStyle}\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"Please enter country...\"\n        />\n        <br></br>\n        <button style={btnStyle}>Get Weather</button>\n      </form>\n    );\n  }\n}\n\nconst btnStyle = {\n  padding: '20px',\n  backgroundColor: 'rgb(125, 148, 37)',\n  fontWeight: 'bold',\n  fontSize: '18px',\n  margin: '20px auto'\n};\n\nconst inputStyle = {\n  padding: '15px',\n  borderRadius: '10px',\n  border: '2px solid #000',\n  margin: '0 10px'\n};\n\nexport default Weather;\n","import React, { Component } from 'react';\n\nclass Display extends Component {\n  render() {\n    return (\n      <div className=\"displayPanel\">\n        {this.props.city && this.props.country && (\n          <p>Temperature : {this.props.temperature}</p>\n        )}\n        {this.props.city && this.props.country && (\n          <p>humidity : {this.props.humidity}</p>\n        )}\n\n        {this.props.city && this.props.country && (\n          <p>description : {this.props.description}</p>\n        )}\n        {this.props.city && this.props.country && (\n          <p>City : {this.props.city}</p>\n        )}\n        {this.props.error && <p>{this.props.error}</p>}\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React from 'react';\nimport Titles from './components/Titles';\nimport Weather from './components/Weather';\nimport Display from './components/Display';\n// import uuid from 'uuid';\nimport './App.css';\n\nconst API_key = '93249116bd279e94d181d260fe4dcb7e';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    city: undefined,\n    country: undefined,\n    error: ''\n    // id:uuid.v4()\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const result = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_key}&units=metric`\n    );\n    const data = await result.json();\n    console.log(data);\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        city: data.name,\n        country: data.sys.country,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        humidity: undefined,\n        description: undefined,\n        city: undefined,\n        country: undefined,\n        error: 'Please Enter the Values'\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Titles />\n        <Weather getWeather={this.getWeather} />\n        <Display\n          temperature={this.state.temperature}\n          description={this.state.description}\n          humidity={this.state.humidity}\n          city={this.state.city}\n          country={this.state.country}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}